_COVERAGE_FLAGS = ' -ftest-coverage -fprofile-arcs -fprofile-dir=.'
_WHOLE_ARCHIVE = '-all_load' if CONFIG.OS == 'darwin' else '--whole-archive'
_NO_WHOLE_ARCHIVE = '-noall_load' if CONFIG.OS == 'darwin' else '--no-whole-archive'

def _default_cflags(c, dbg):
    """Returns the default cflags / cppflags for opt/dbg as appropriate."""
    if c:
        return CONFIG.DEFAULT_DBG_CFLAGS if dbg else CONFIG.DEFAULT_OPT_CFLAGS
    else:
        return CONFIG.DEFAULT_DBG_CPPFLAGS if dbg else CONFIG.DEFAULT_OPT_CPPFLAGS

def _build_flags(compiler_flags:list, pkg_config_libs:list, pkg_config_cflags:list, defines=None, c=False, dbg=False):
    """Builds flags that we'll pass to the compiler invocation."""
    compiler_flags = [_default_cflags(c, dbg), '-fPIC'] + compiler_flags  # N.B. order is important!
    if defines:
        compiler_flags += ['-D' + define for define in defines]

    pkg_config_cmd = ' '.join([f'`pkg-config --cflags {x}`' for x in pkg_config_cflags + pkg_config_libs])

    return ' '.join(compiler_flags) + ' ' + pkg_config_cmd


def _binary_build_flags(linker_flags:list, pkg_config_libs:list, shared=False, alwayslink='', c=False, dbg=False):
    """Builds flags that we'll pass to the linker invocation."""
    pkg_config_cmd = ' '.join([f'`pkg-config --libs {x}`' for x in pkg_config_libs])

    objs = '`find . -name "*.o" -or -name "*.a" | sort`'
    linker_prefix = '' if CONFIG.LINK_WITH_LD_TOOL else '-Wl,'
    if (not shared) and alwayslink:
        objs = f'{linker_prefix}{_WHOLE_ARCHIVE} {alwayslink} {linker_prefix}{_NO_WHOLE_ARCHIVE} {objs}'
    if CONFIG.OS != 'darwin':
        # We don't order libraries in a way that is especially useful for the linker, which is
        # nicely solved by --start-group / --end-group. Unfortunately the OSX linker doesn't
        # support those flags; in many cases it will work without, so try that.
        # Ordering them would be ideal but we lack a convenient way of working that out from here.
        objs = f'{linker_prefix}--start-group {objs} {linker_prefix}--end-group'
    if CONFIG.OS == 'linux':
        # This flag exists only in the GNU ld, where it improves determinism. OS detection is not ideal
        # but there isn't much alternative.
        linker_flags += ['--build-id=none']
    if shared:
        objs = f'-shared {linker_prefix}{_WHOLE_ARCHIVE} {objs} {linker_prefix}{_NO_WHOLE_ARCHIVE}'
    linker_flags = ' '.join([linker_prefix + f for f in linker_flags])
    if not CONFIG.LINK_WITH_LD_TOOL:
        linker_flags += ' ' + _default_cflags(c, dbg)
    return ' '.join([objs, linker_flags, pkg_config_cmd])


def _library_cmds(c, compiler_flags, pkg_config_libs, pkg_config_cflags, extra_flags='', archive=True):
    """Returns the commands needed for a cc_library rule."""
    dbg_flags = _build_flags(compiler_flags, pkg_config_libs, pkg_config_cflags, c=c, dbg=True)
    opt_flags = _build_flags(compiler_flags, pkg_config_libs, pkg_config_cflags, c=c)
    cmd_template = '$TOOLS_CC -c -I . ${SRCS_SRCS} %s %s'
    if archive:
        cmd_template += ' && "$TOOLS_JARCAT" ar -r && "$TOOLS_AR" s "$OUT"'
    cmds = {
        'dbg': cmd_template % (dbg_flags, extra_flags),
        'opt': cmd_template % (opt_flags, extra_flags),
    }
    if CONFIG.CPP_COVERAGE:
        cmds['cover'] = cmd_template % (dbg_flags + _COVERAGE_FLAGS, extra_flags)
    return cmds, {
        'cc': [CONFIG.CC_TOOL if c else CONFIG.CPP_TOOL],
        'jarcat': [CONFIG.JARCAT_TOOL if archive else None],
        'ar': [CONFIG.AR_TOOL if archive else None],
    }

def _binary_cmds(c, linker_flags, pkg_config_libs, extra_flags='', shared=False, alwayslink=''):
    """Returns the commands needed for a cc_binary, cc_test or cc_shared_object rule."""
    dbg_flags = _binary_build_flags(linker_flags, pkg_config_libs, shared, alwayslink, c=c, dbg=True)
    opt_flags = _binary_build_flags(linker_flags, pkg_config_libs, shared, alwayslink, c=c, dbg=False)
    cmds = {
        'dbg': f'"$TOOL" -o "$OUT" {dbg_flags} {extra_flags}',
        'opt': f'"$TOOL" -o "$OUT" {opt_flags} {extra_flags}',
    }
    if CONFIG.CPP_COVERAGE:
        cmds['cover'] = f'"$TOOL" -o "$OUT" {dbg_flags} {extra_flags} {_COVERAGE_FLAGS} -lgcov'
    return cmds, [CONFIG.LD_TOOL if CONFIG.LINK_WITH_LD_TOOL else
                  CONFIG.CC_TOOL if c else CONFIG.CPP_TOOL]

def _library_transitive_labels(c, compiler_flags, pkg_config_libs, pkg_config_cflags, archive=True):
    """Applies commands from transitive labels to a cc_library rule."""
    def apply_transitive_labels(name):
        labels = get_labels(name, 'cc:')
        flags = ['-isystem %s' % l[4:] for l in labels if l.startswith('inc:')]
        flags += ['-D' + l[4:] for l in labels if l.startswith('def:')]

        pkg_config_libs += [l[3:] for l in labels if l.startswith('pc:') and l[3:] not in pkg_config_libs]
        pkg_config_cflags += [l[4:] for l in labels if l.startswith('pcc:') and l[4:] not in pkg_config_cflags]
        mods = ['-fmodule-file=' + l[4:] for l in labels if l.startswith('mod:')]
        flags += mods
        if mods:
            flags += ['-fmodules-ts' if CONFIG.CC_MODULES_CLANG else '-fmodules']
        if flags:  # Don't update if there aren't any relevant labels
            cmds, _ = _library_cmds(c, compiler_flags, pkg_config_libs, pkg_config_cflags, ' '.join(flags), archive=archive)
            for k, v in cmds.items():
                set_command(name, k, v)
    return apply_transitive_labels


def _binary_transitive_labels(c, linker_flags, pkg_config_libs, shared=False):
    """Applies commands from transitive labels to a cc_binary, cc_test or cc_shared_object rule."""
    def apply_transitive_labels(name):
        labels = get_labels(name, 'cc:')
        linker_prefix = '' if CONFIG.LINK_WITH_LD_TOOL else '-Wl,'
        flags = [linker_prefix + l[3:] for l in labels if l.startswith('ld:')]

        flags += ['`pkg-config --libs %s`' % l[3:] for l in labels if l.startswith('pc:')]

        # ./ here because some weak linkers don't realise ./lib.a is the same file as lib.a
        # and report duplicate symbol errors as a result.
        alwayslink = ' '.join(['./' + l[3:] for l in labels if l.startswith('al:')])
        # Probably a little optimistic to check this (most binaries are likely to have *some*
        # kind of linker flags to apply), but we might as well.
        if flags or alwayslink:
            cmds, _ = _binary_cmds(c, linker_flags, pkg_config_libs, ' '.join(flags), shared, alwayslink)
            for k, v in cmds.items():
                set_command(name, k, v)
    return apply_transitive_labels

def custom_cc_test(name:str, srcs:list=[], hdrs:list=[], compiler_flags:list&cflags&copts=[],
            linker_flags:list&ldflags&linkopts=[], pkg_config_libs:list=[],
            pkg_config_cflags:list=[], deps:list=[], worker:str='', data:list|dict=[],
            visibility:list=[], flags:str='', labels:list&features&tags=[], flaky:bool|int=0,
            test_outputs:list=[], size:str=None, timeout:int=0,
            sandbox:bool=None, write_main:bool=False, linkstatic:bool=False, _c=False):
    """Defines a C++ test.
    We template in a main file so you don't have to supply your own.
    (Later we might allow that to be configured to help support other unit test frameworks).
    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      pkg_config_libs (list): Libraries to declare a dependency on using `pkg-config --libs`
      pkg_config_cflags (list): Libraries to declare a dependency on using `pkg-config --cflags`
      deps (list): Dependent rules.
      worker (str): Reference to worker script, A persistent worker process that is used to set up the test.
      data (list): Runtime data files for this test.
      visibility (list): Visibility declaration for this rule.
      flags (str): Flags to apply to the test invocation.
      labels (list): Labels to attach to this test.
      flaky (bool | int): If true the test will be marked as flaky and automatically retried.
      test_outputs (list): Extra test output files to generate from this test.
      size (str): Test size (enormous, large, medium or small).
      timeout (int): Length of time in seconds to allow the test to run for before killing it.
      sandbox (bool): Sandbox the test on Linux to restrict access to namespaces such as network.
      write_main (bool): Deprecated, has no effect. See `plz help testmain` for more information
                         about how to define a default dependency for the test main.
      linkstatic (bool): Only provided for Bazel compatibility. Has no actual effect since we always
                         link roughly equivalently to their "mostly-static" mode.
    """

    if CONFIG.BAZEL_COMPATIBILITY:
        linker_flags = ['-lpthread' if l == '-pthread' else l for l in linker_flags]
    if CONFIG.DEFAULT_LDFLAGS:
        linker_flags += [CONFIG.DEFAULT_LDFLAGS]
    if CONFIG.CC_TEST_MAIN and not _c:
        deps += [CONFIG.CC_TEST_MAIN]
    cmds, tools = _binary_cmds(_c, linker_flags, pkg_config_libs)

    if srcs:
        lib_rule = cc_library(
            name=f'_{name}#lib',
            srcs=srcs,
            hdrs=hdrs,
            deps=deps,
            pkg_config_libs=pkg_config_libs,
            pkg_config_cflags=pkg_config_cflags,
            compiler_flags=compiler_flags,
            test_only=True,
            alwayslink=True,
            _c=_c,
        )
        deps += [lib_rule]

    test_cmd = f'$TEST {flags}'
    if worker:
        test_cmd = f'$(worker {worker}) && {test_cmd} '
        deps += [worker]

    outs = [name]
    if CONFIG.CPP_COVERAGE:
        test_cmd = {
            'opt': test_cmd,
            'dbg': test_cmd,
            'cover': test_cmd + '; R=$?; cp $GCNO_DIR/*.gcno . && gcov *.gcda && cat *.gcov > test.coverage; exit $R'
            # 'cover': test_cmd + '; R=$?; cp $GCNO_DIR/*.gcno . && lcov --directory . --capture --output-file test.coverage; exit $R'
        }

    return build_rule(
        name=name,
        outs=[name],
        deps=deps,
        data=data,
        visibility=visibility,
        cmd=cmds,
        test_cmd=test_cmd,
        building_description='Linking...',
        binary=True,
        test=True,
        needs_transitive_deps=True,
        output_is_complete=True,
        requires=['cc', 'cc_hdrs', 'test'],
        labels=labels,
        tools=tools,
        pre_build=_binary_transitive_labels(_c, linker_flags, pkg_config_libs),
        # post_build= lambda name, output: [add_out(name, line.replace(), line) for line in output],
        flaky=flaky,
        test_outputs=test_outputs,
        test_timeout=timeout,
        size = size,
        test_sandbox=sandbox,
    )
